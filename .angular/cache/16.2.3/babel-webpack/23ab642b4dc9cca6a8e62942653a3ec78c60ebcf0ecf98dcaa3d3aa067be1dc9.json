{"ast":null,"code":"import { environment } from '../../environments/environment.prod';\nimport swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BookService = /*#__PURE__*/(() => {\n  var _class;\n  class BookService {\n    constructor(_httpClient) {\n      this._httpClient = _httpClient;\n    }\n    getBooks() {\n      const url = environment.API_REST_URL + `/book`;\n      return this._httpClient.get(url);\n    }\n    getBooksFromCart() {\n      let listBook = JSON.parse(localStorage.getItem('listCartBook') || '');\n      if (listBook === null) {\n        listBook = [];\n      }\n      return listBook;\n    }\n    removeBooksFromCart() {\n      localStorage.setItem('listCartBook', '');\n    }\n    addBookToCart(book) {\n      let listBook = JSON.parse(localStorage.getItem('listCartBook') || '');\n      if (listBook === null) {\n        // Create a list with the book\n        book.amount = 1;\n        listBook = [book];\n      } else {\n        const index = listBook.findIndex(item => {\n          return book.id === item.id;\n        });\n        if (index !== -1 && index && listBook[index] && listBook[index].amount) {\n          listBook[index].amount += 1;\n        } else {\n          book.amount = 1;\n          listBook.push(book);\n        }\n      }\n      localStorage.setItem('listCartBook', JSON.stringify(listBook));\n      this._toastSuccess(book);\n    }\n    updateAmountBook(book) {\n      const listBookCart = this.getBooksFromCart();\n      const index = listBookCart.findIndex(item => {\n        return book.id === item.id;\n      });\n      if (index !== -1) {\n        listBookCart[index].amount = book.amount;\n        if (book.amount === 0) {\n          listBookCart.splice(index, 1);\n        }\n      }\n      localStorage.setItem('listCartBook', JSON.stringify(listBookCart));\n      return listBookCart;\n    }\n    _toastSuccess(book) {\n      const Toast = swal.mixin({\n        toast: true,\n        position: 'bottom-end',\n        showConfirmButton: false,\n        timer: 2000,\n        didOpen: toast => {\n          toast.addEventListener('mouseenter', swal.stopTimer);\n          toast.addEventListener('mouseleave', swal.resumeTimer);\n        }\n      });\n      Toast.fire({\n        icon: 'success',\n        title: book.name + ' added to cart'\n      });\n    }\n  }\n  _class = BookService;\n  _class.ɵfac = function BookService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return BookService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}